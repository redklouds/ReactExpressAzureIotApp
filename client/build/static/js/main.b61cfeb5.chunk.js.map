{"version":3,"sources":["FunComponent.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["FunComp","props","state","displayRes","happy2","bind","event","console","log","fetch","then","response","json","JsonData","setState","data","catch","e","payload","Button","variant","color","className","onClick","this","feedPet","React","Component","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"+SA+DeA,E,YAxDX,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,WAAY,WAGd,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBAPG,E,oEAUZC,GAAQ,IAAD,OACVC,QAAQC,IAAI,cACZC,MAAM,gBAELC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAQ1BF,MAAK,SAAAG,GACFN,QAAQC,IAAIK,GACd,EAAKC,SAAS,CAACX,WAAWU,EAASE,OACnCR,QAAQC,IAAIK,MACXG,OAAM,SAASC,GACdV,QAAQC,IAAIS,Q,gCAKR,IAAD,OACPV,QAAQC,IAAI,eACZC,MAAM,gBACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAACX,WAAWU,EAASE,KAAKG,QAAQH,OAChDR,QAAQC,IAAIK,Q,+BAMd,OACA,6BAEA,kBAACM,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,UAAU,WAAWC,QAASC,KAAKpB,QAAjF,cACA,2BAAIoB,KAAKtB,MAAMC,YACf,kBAACgB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,UAAU,WAAWC,QAASC,KAAKC,SAAjF,iB,GAlDcC,IAAMC,WCqBbC,MAvBf,WACE,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKO,IAAKC,IAAMR,UAAU,WAAWS,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACET,UAAU,WACVU,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eASA,kBAAC,EAAD,SCTYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.b61cfeb5.chunk.js","sourcesContent":["import React from 'react';\r\n//var iothub = require('azure-iothub');\r\n//import Client from 'azure-iot-device' ;\r\n\r\nimport Button from '@material-ui/core/Button'\r\n\r\nclass FunComp extends React.Component{\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.state = {\r\n        displayRes: \"RandDOO\"\r\n      };\r\n  \r\n      this.happy2 = this.happy2.bind(this);\r\n    }\r\n\r\n    happy2(event) {\r\n        console.log(\"in happy 2\")\r\n        fetch(\"/api/feeder/\")\r\n        \r\n        .then(response => response.json()\r\n            /*\r\n            console.log(response.text());  \r\n            console.log(response);\r\n            console.log(response.status);\r\n            console.log(response.json());\r\n            \r\n        */)\r\n        .then(JsonData =>  {\r\n            console.log(JsonData);\r\n          this.setState({displayRes:JsonData.data});\r\n          console.log(JsonData);\r\n        }).catch(function(e) {\r\n            console.log(e);\r\n        });\r\n     \r\n      }\r\n\r\n      feedPet(){\r\n        console.log(\"feeding pet\")\r\n        fetch(\"/api/feedpet\")\r\n        .then(response => response.json())\r\n        .then(JsonData =>  {\r\n          this.setState({displayRes:JsonData.data.payload.data});\r\n          console.log(JsonData);\r\n        });\r\n      }\r\n        \r\n    render(){\r\n      \r\n        return(\r\n        <div>\r\n  \r\n        <Button variant=\"contained\" color=\"secondary\" className=\"App-link\" onClick={this.happy2}>click ME2!</Button>\r\n        <p>{this.state.displayRes}</p>\r\n        <Button variant=\"contained\" color=\"secondary\" className=\"App-link\" onClick={this.feedPet}>Feed Pet</Button>\r\n        \r\n        </div>)\r\n      }\r\n\r\n}\r\n\r\nexport default FunComp;\r\n  ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FunComp from './FunComponent';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n\n        <FunComp></FunComp>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}